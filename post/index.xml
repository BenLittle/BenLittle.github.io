<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ben Little - Test Automation Consultant</title>
    <link>https://benlittle.github.io/post/</link>
    <description>Recent content in Posts on Ben Little - Test Automation Consultant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 16 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://benlittle.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test Automation with Kafka - Set up the AVA Test Framework</title>
      <link>https://benlittle.github.io/post/kafka-test-automation/part-2/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://benlittle.github.io/post/kafka-test-automation/part-2/</guid>
      <description>Introduction We&amp;rsquo;re going to use AVA as our chosen test runner. AVA takes advantage of asynchronous functions and runs your tests concurrently. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file.
Setup  Install and setup AVA - npx create-ava --next.
 Within your directory, you should have a very basic package.json file now configured.</description>
    </item>
    
    <item>
      <title>Test Automation with Kafka - Docker and Kafka</title>
      <link>https://benlittle.github.io/post/kafka-test-automation/part-1/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://benlittle.github.io/post/kafka-test-automation/part-1/</guid>
      <description>Introduction This guide is an introduction to test automation through the use of Apache Kafka®. Apache Kafka® is a publish-subscribe messaging system that&amp;rsquo;s used widely across many industries.
I&amp;rsquo;ve previously worked on projects that used Kafka for low latency, high volume, scalable data streaming in real-time applications.
In this series of posts, I will show you how to set up a full end-to-end test automation framework, which will include:</description>
    </item>
    
  </channel>
</rss>